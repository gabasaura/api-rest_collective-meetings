openapi: 3.0.1
info:
  title: WeMeet API
  description: API documentation for the WeMeet app.
  version: "1.0.0"
servers:
  - url: http://localhost:5000
    description: Local server

paths:
  /:
    get:
      summary: Welcome message
      description: Returns a welcome message for the WeMeet app.
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Hello, welcome to the WeMeet app!

  /users/{user_id}:
    get:
      summary: Get user details
      description: Retrieves the details of a user by ID.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
        500:
          description: Error retrieving user

    delete:
      summary: Delete a user
      description: Deletes a user by ID.
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: User deleted successfully
        404:
          description: User not found
        500:
          description: Error deleting user

  /meetings:
    post:
      summary: Create a new meeting
      description: Creates a new meeting.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - creator_name
                - creator_email
              properties:
                title:
                  type: string
                creator_name:
                  type: string
                creator_email:
                  type: string
                description:
                  type: string
      responses:
        201:
          description: Meeting created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Meeting created successfully
                  meeting:
                    $ref: '#/components/schemas/Meeting'
                  invite_link:
                    type: string
                    example: http://localhost:5000/meetings/{meeting_id}/access?hash={hash}
        400:
          description: Invalid input
        500:
          description: Error creating meeting

  /meetings/{meeting_id}:
    get:
      summary: Get meeting details
      description: Retrieves the details of a meeting by ID.
      parameters:
        - in: path
          name: meeting_id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Meeting retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Meeting'
        404:
          description: Meeting not found
        500:
          description: Error retrieving meeting

    delete:
      summary: Delete a meeting
      description: Deletes a meeting by ID.
      parameters:
        - in: path
          name: meeting_id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Meeting deleted successfully
        404:
          description: Meeting not found
        500:
          description: Error deleting meeting

  /meetings/{meeting_id}/access/{hash}:
    get:
      summary: Access a private meeting
      description: Allows access to a private meeting using a hash.
      parameters:
        - in: path
          name: meeting_id
          required: true
          schema:
            type: integer
        - in: path
          name: hash
          required: true
          schema:
            type: string
      responses:
        200:
          description: Access granted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Access granted
        403:
          description: Invalid access hash
        404:
          description: Meeting not found
        500:
          description: Error accessing meeting

  /meetings/{meeting_id}/add_guest:
    post:
      summary: Add a guest to a meeting
      description: Adds a guest to a meeting.
      parameters:
        - in: path
          name: meeting_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
              properties:
                name:
                  type: string
                email:
                  type: string
      responses:
        201:
          description: Guest added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User {name} added as guest to meeting {meeting.title}
                  user:
                    $ref: '#/components/schemas/User'
                  meeting:
                    $ref: '#/components/schemas/Meeting'
                  color:
                    type: string
                    example: "#FF5733"
        400:
          description: Invalid input
        500:
          description: Error adding guest to meeting

  /meetings/{meeting_id}/final_date/{final_date_id}/summary:
    get:
      summary: Get meeting summary
      description: Retrieves a summary of the final date of a meeting.
      parameters:
        - in: path
          name: meeting_id
          required: true
          schema:
            type: integer
        - in: path
          name: final_date_id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Meeting summary retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  meeting:
                    type: string
                    example: Meeting title
                  final_date:
                    type: string
                    format: date
                    example: 2024-08-21
                  total_guests:
                    type: integer
                    example: 10
                  confirmed_guests:
                    type: integer
                    example: 8
        404:
          description: Meeting or final date not found
        500:
          description: Error retrieving meeting summary

  /timeslots:
    post:
      summary: Create a new timeslot
      description: Creates a new timeslot for a meeting.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - meeting_id
                - user_id
                - date
                - block
              properties:
                meeting_id:
                  type: integer
                user_id:
                  type: integer
                date:
                  type: string
                  format: date
                block:
                  type: integer
                available:
                  type: boolean
                  default: true
      responses:
        201:
          description: Timeslot created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timeslot'
        400:
          description: Invalid input
        500:
          description: Error creating timeslot

  /update_timeslot:
    post:
      summary: Update a timeslot
      description: Updates the availability of a timeslot.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - meeting_id
                - date
                - block
              properties:
                user_id:
                  type: integer
                meeting_id:
                  type: integer
                date:
                  type: string
                  format: date
                block:
                  type: integer
                available:
                  type: boolean
      responses:
        200:
          description: Timeslot updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  rankings:
                    type: array
                    items:
                      type: object
        400:
          description: Invalid input
        500:
          description: Error updating timeslot

  /meetings/{meeting_id}/timeslots/{timeslot_id}:
    get:
      summary: Get timeslot for meeting
      description: Retrieves a timeslot for a specific meeting by ID.
      parameters:
        - in: path
          name: meeting_id
          required: true
          schema:
            type: integer
        - in: path
          name: timeslot_id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Timeslot retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timeslot'
        404:
          description: Timeslot not found
        500:
          description: Error retrieving timeslot

  /timeslots/{meeting_id}/{timeslot_id}:
    delete:
      summary: Delete a timeslot
      description: Deletes a timeslot for a specific meeting by ID.
      parameters:
        - in: path
          name: meeting_id
          required: true
          schema:
            type: integer
        - in: path
          name: timeslot_id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Timeslot deleted successfully
        404:
          description: Timeslot not found
        500:
          description: Error deleting timeslot

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Meeting:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        description:
          type: string
        hash:
          type: string
        final_date:
          type: string
          format: date
        guests:
          type: array
          items:
            $ref: '#/components/schemas/User'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Timeslot:
      type: object
      properties:
        id:
          type: integer
        meeting_id:
          type: integer
        user_id:
          type: integer
        date:
          type: string
          format: date
        block:
          type: integer
        available:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
